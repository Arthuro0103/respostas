<?php
//1002
$n = 3.14159;
$raio = fgets(STDIN);
$A = $n * pow($raio,2);
echo "A=".number_format($A,4,".","") . "\n";
//1005
$A = fgets(STDIN);
$B = fgets(STDIN);
$MEDIA =($A*3.5+$B*7.5)/11;
echo "MEDIA = ".number_format($MEDIA,5,".","") . "\n";
//1006
$A = fgets(STDIN);
$B = fgets(STDIN);
$C = fgets(STDIN);
$MEDIA =($A*2+$B*3+$C*5)/10;
echo "MEDIA = ".number_format($MEDIA,1,".","") . "\n"
//1008
$NUMBER = fgets(STDIN);
$salarioPorHora = fgets(STDIN);
$horas = fgets(STDIN);
$SALARY = ($horas*$salarioPorHora);
echo "NUMBER = $NUMBER";
echo "SALARY = U$ ".number_format($SALARY,2,".","") . "\n";
//1009
$NAME = fgets(STDIN);
$salario = fgets(STDIN);
$comissao = fgets(STDIN);
$total = $salario+($comissao*0.15);
printf ("TOTAL = R$ %.2f\n", $total);
//1010
$p1 = explode(" ", fgets(STDIN));
$p2 = explode(" ", fgets(STDIN));
$soma = number_format(($p1[1] * $p1[2]) + ($p2[1] * $p2[2]), 2, '.', '');
echo "VALOR A PAGAR: R$ $soma\n";
//1011
$R = fgets(STDIN);
$pi = 3.14159;
$volume = $pi * (4.0/3) * pow($R,3);
echo "VOLUME = " . number_format($volume,3,".","") . "\n";
//1013
$ABC = explode(" ", fgets(STDIN));
$maiorAB = ($ABC[0] + $ABC[1]+abs($ABC[0] - $ABC[1]))/2;
$maiorMaior = ($maiorAB + $ABC[2] + abs($maiorAB - $ABC[2]))/2;
echo "$maiorMaior eh o maior" . "\n";
//1014
$X = (int) fgets(STDIN);
$Y = (float) fgets(STDIN);
echo number_format(($X / $Y), 3, '.', '') . " km/l\n";
//1016
$Y = fgets(STDIN);
$kmh = $Y * 2;
echo "$kmh minutos\n";
//1012
list($a, $b, $c) = fscanf(STDIN, "%f %f %f");
$triangulo = ($a * $c) / 2;
$circulo = 3.14159 * pow($c, 2);
$trapezio = (($a + $b) * $c) / 2;
$quadrado = pow($b, 2);
$retangulo = $a * $b;
printf("TRIANGULO: %.3f\n", $triangulo);
printf("CIRCULO: %.3f\n", $circulo);
printf("TRAPEZIO: %.3f\n", $trapezio);
printf("QUADRADO: %.3f\n", $quadrado);
printf("RETANGULO: %.3f\n", $retangulo);
//1015
list($x1, $y1) = fscanf(STDIN, "%f %f");
list($x2, $y2) = fscanf(STDIN, "%f %f");
$distancia =sqrt(pow($x2-$x1,2)+pow($y2-$y1,2));
echo number_format($distancia, 4, '.', '') . "\n";
//1017
$horas = (int)fgets(STDIN);
$velocidadekm = (int)fgets(STDIN);
$distancia = $horas*$velocidadekm;
$litros = $distancia/12;
printf("%.3f\n",$litros);
//1018
$valor = (int) fgets(STDIN);
$notas = array(100, 50, 20, 10, 5, 2, 1);
$qtd_notas = array_fill(0, count($notas), 0);
echo $valor . "\n";
for ($i = 0, $size = count($notas); $i < $size; $i++) {
    while ($valor >= $notas[$i]) {
        $valor -= $notas[$i];
        $qtd_notas[$i]++;
    }
}

for ($i = 0, $size = count($notas); $i < $size; $i++) {
    echo $qtd_notas[$i] . " nota(s) de R$ " . number_format($notas[$i], 2, ',', '.') . "\n";
}
//1019
$segundos = intval(fgets(STDIN));
$horas = intval($segundos / 3600);
$minutos = in
tval(($segundos % 3600) / 60);
$segundos = $segundos % 60;
printf("%d:%1d:%1d \n", $horas, $minutos, $segundos);
//1020
$diasDA = fgets(STDIN);
$anos = intval($diasDA/365);
$meses = intval(($diasDA%365)/30);
$dias = intval(($diasDA%365)%30);
echo number_format($anos,0,",",".")," ano(s)\n";
echo number_format($meses,0,",",".")," mes(es)\n";
echo number_format($dias,0,",",".")," dia(s)\n";
//1021
$valor = (float) fgets(STDIN);
$centavos = (int) ($valor * 100);
$notas_moedas = [
    10000,
    5000,
    2000,
    1000,
    500,
    200,
    100,
    50,
    25,
    10,
    5,
    1
];
$quantidades = array_fill(0, count($notas_moedas), 0);
foreach ($notas_moedas as $indice => $valor_nota_moeda) {
    $quantidade = (int) ($centavos / $valor_nota_moeda);
    $centavos -= $quantidade * $valor_nota_moeda;
    $quantidades[$indice] = $quantidade;
}
echo "NOTAS:\n";
echo $quantidades[0] . " nota(s) de R$ 100.00\n";
echo $quantidades[1] . " nota(s) de R$ 50.00\n";
echo $quantidades[2] . " nota(s) de R$ 20.00\n";
echo $quantidades[3] . " nota(s) de R$ 10.00\n";
echo $quantidades[4] . " nota(s) de R$ 5.00\n";
echo $quantidades[5] . " nota(s) de R$ 2.00\n";
echo "MOEDAS:\n";
echo $quantidades[6] . " moeda(s) de R$ 1.00\n";
echo $quantidades[7] . " moeda(s) de R$ 0.50\n";
echo $quantidades[8] . " moeda(s) de R$ 0.25\n";
echo $quantidades[9] . " moeda(s) de R$ 0.10\n";
echo $quantidades[10] . " moeda(s) de R$ 0.05\n";
echo $quantidades[11] . " moeda(s) de R$ 0.01\n";
//ex1
class pessoa 
{
    private $nome;
    private $idade;
    private $sexo;

    public function __construct ($nome,$idade,$sexo){

    $this->nome = $nome;
    $this->idade = $idade;
    $this->sexo = $sexo;

    }

    public function retornanome(){
        return $this->nome . PHP_EOL;
    }

    public function retornaidade(){
        return $this->idade . PHP_EOL;
    }
    public function retornasexo(){
        return $this->sexo . PHP_EOL;
    }

}
$joao = new pessoa('joao','15','masculino');
echo $joao->retornanome();
echo $joao->retornaidade();
echo $joao->retornasexo();
//ex2
class ContaBancaria 
{
    private $saldo;
    public function __construct ($saldo){
    $this->saldo = $saldo;
    }
    public function depositarEsacar(){
        if (fgets(STDIN) < 1){
        echo "deposite o valor desejado(1 novamente):";
        return $this->saldo+fgets(STDIN) . PHP_EOL;
    }
    else {
        echo "saque o valor desejado(2 novamente):";
    if ($this->saldo>=fgets(STDIN)){
        return $this->saldo-fgets(STDIN) . PHP_EOL;
    }
}
        }
    }
$joao = new ContaBancaria('100');
echo $joao->depositarEsacar();
//ex3
class Pessoa {
    protected $nome;
    protected $idade;
    protected $sexo;
    public function __construct($nome, $idade,$sexo) {
        $this->nome = $nome;
        $this->idade = $idade;
        $this->sexo = $sexo;
    }
    public function retornanome(){
        return $this->nome . PHP_EOL;
    }

    public function retornaidade(){
        return $this->idade . PHP_EOL;
    }
    public function retornasexo(){
        return $this->sexo . PHP_EOL;
    }

}

class Funcionario extends Pessoa {
    protected $salario;
    
    public function __construct($nome, $idade,$sexo, $salario) {
        parent::__construct($nome, $idade,$sexo);
        $this->salario = $salario;
    }
    public function retornasalario(){
        return $this->salario . PHP_EOL;
    }

}


$funcionario1 = new Funcionario("João", 30,'masculino', 2500.00);
echo "Nome: " . $funcionario1->retornanome();
echo "Idade: " . $funcionario1->retornaidade();
echo "Sexo: " . $funcionario1->retornasexo();
echo "Salário: R$ " . $funcionario1->retornasalario();

//ex4
interface formaGeometrica{
  public function calculararea();  
  public function calcularperimetro();  

}
class retangulo implements formaGeometrica{
  protected $base;
  protected $altura;  
  public function __construct($base, $altura) {
    $this->base = $base;
    $this->altura = $altura;
}

public function calcularArea() {
    return $this->base * $this->altura;
}

public function calcularPerimetro() {
    return 2 * ($this->base + $this->altura);
}
}

class circulo implements formaGeometrica{
 protected $raio;  
 public function __construct($raio) {
    $this->raio = $raio;
}

public function calcularArea() {
    return pi() * pow($this->raio, 2);
}

public function calcularPerimetro() {
    return 2 * pi() * $this->raio;
} 
}
$pessoaDoRetangulo = new Retangulo(10, 5);
echo "Área do retângulo: " . $pessoaDoRetangulo->calcularArea(),"\n";
echo "Perímetro do retângulo: " . $pessoaDoRetangulo->calcularPerimetro(),"\n";


$pessoaDoCirculo = new Circulo(3);
echo "Área do círculo: " . $pessoaDoCirculo->calcularArea(),"\n";
echo "Perímetro do círculo: " . $pessoaDoCirculo->calcularPerimetro(),"\n";
//ex5
class carro{
  private $marca;
  private $modelo;
  private $ano;
  public $velocidadeAtual;
  public function __construct ($marca,$modelo,$ano,$velocidadeAtual){
    $this->marca = $marca;
    $this->modelo = $modelo;
    $this->ano = $ano;
    $this->velocidadeAtual = $velocidadeAtual;
  }

public function retornamarca(){
    return $this->marca . PHP_EOL;
}

public function retornamodelo(){
    return $this->modelo . PHP_EOL;
}
public function retornaano(){
    return $this->ano . PHP_EOL;
}
public function retornavelocidade(){
    return $this->velocidadeAtual;
}
public function setvelocidade($velocidade){
    $this->velocidadeAtual = $velocidade;
}


    }
    $carro = new carro('chevrolet','v8','2010',60);
    echo $carro->retornaano();
    echo $carro->retornamodelo();
    echo $carro->retornamarca();

     function aumentaVelocidade($carro){
      do{
       
       $velocidade = $carro->retornavelocidade() + $carro->retornavelocidade()*0.1;
       $carro->setvelocidade($velocidade);
       echo $carro->retornavelocidade().PHP_EOL;
}        
    while($carro->retornavelocidade() <= 120);
        
     }
    aumentaVelocidade($carro);
     //ex6
abstract class Animal {
    abstract public function emitirSom();
}
class Cachorro extends Animal {
   public function emitirSom() {
        echo "Au au!" . PHP_EOL;
    }
}
class Gato extends Animal {
    public function emitirSom() {
        echo "Miau!" . PHP_EOL;
    }
}
$cachorro = new Cachorro();
$cachorro->emitirSom(); 
$gato = new Gato();
$gato->emitirSom();
?>



